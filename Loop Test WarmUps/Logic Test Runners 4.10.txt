using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;
using NUnit.Framework;
using LogicTestWarmups.BLL;



namespace LogicTestWarmup.Tests
{
    [TestFixture]
    public class LogicTestRunner
    {
        [TestCase(30, false, false)]//this is what it SHOULD be - here is the data to pass into the test
        [TestCase(50, false, true)]
        [TestCase(70, true, true)]
        public void GoodPartyTest(int cigars, bool isWeekend, bool expected) // the method that runs the parameters - need to run code for tests
        {
            Logic party = new Logic(); //instantiate the class here
            bool actual = party.GoodParty(cigars, isWeekend);

            Assert.AreEqual(expected, actual); //need to have nunit test reference in order to run
        }
        //______________________________________________________________________________________________________________________________________________________

        [TestCase(5, 10, 2)]//this is what it SHOULD be - here is the data to pass into the test
        [TestCase(5, 2, 0)]
        [TestCase(5, 5, 1)]
        public void CanHazTableTest(int yourStyle, int dateStyle, int expected)// 0=no, 1=maybe, 2=yes
        {
            Logic table = new Logic();
            int actual = table.CanHazTable(yourStyle, dateStyle);

            Assert.AreEqual(expected, actual);
        }
        //______________________________________________________________________________________________________________________________________________________
       
        [TestCase(70, false, true)]//this is what it SHOULD be - here is the data to pass into the test
        [TestCase(95, false, false)]
        [TestCase(95, true, true)]
        public void PlayOutsideTest(int temp, bool isSummer, bool expected) // the method that runs the parameters - need to run code for tests
        {
            Logic outside = new Logic(); //instantiate the class here
            bool actual = outside.PlayOutside(temp, isSummer);

            Assert.AreEqual(expected, actual); //need to have nunit test reference in order to run
        }
        //_______________________________________________________________________________________________________________________________________________________

        [TestCase(3, 4, 7)]
        [TestCase(9, 4, 20)]
        [TestCase(10, 11, 21)]
        public void SkipSumTest(int a, int b, int expected) 
        {
            Logic skip = new Logic(); //instantiate the class here
            int actual = skip.SkipSum(a, b);

            Assert.AreEqual(expected, actual);
          
        }

        //_______________________________________________________________________________________________________________________________________________________
        
        [TestCase(6,4,true)]
        [TestCase(4,5,false)]
        [TestCase(1,5,true)]
        public void LoveSixTest(int a, int b, bool expected)
        {
            Logic love = new Logic(); 
            bool actual = love.LoveSix(a,b);

            Assert.AreEqual(expected, actual);

        }

        //_______________________________________________________________________________________________________________________________________________________

        [TestCase(22, true)]
        [TestCase(23, true)]
        [TestCase(24, false)]
        public void SpecialElevenTest(int a, bool expected)
        {
            Logic eleven = new Logic();
            bool actual = eleven.SpecialEleven(a, expected);

            Assert.AreEqual(expected, actual);

        }

        //_______________________________________________________________________________________________________________________________________________________

        [TestCase(3, true)]
        [TestCase(10, true)]
        [TestCase(15, false)]
        public void Mod35Test(int a, bool expected)
        {
            Logic mod = new Logic();
            bool actual = mod.Mod35(a, expected);

            Assert.AreEqual(expected, actual);

        }

        //_______________________________________________________________________________________________________________________________________________________

        [TestCase(1, 2, 3, true)]
        [TestCase(3, 1, 2, true)]
        [TestCase(3, 2, 2, false)]
        public void TwoIsOne(int a, int b, int c, bool expected)
        {
            Logic sumtwo = new Logic();
            bool actual = sumtwo.TwoisOne(a, b, c, expected);

            Assert.AreEqual(expected, actual);

        }

        //_______________________________________________________________________________________________________________________________________________________

        [TestCase(2, 5, 11, false, true)]
        [TestCase(5, 7, 6, false, false)]
        [TestCase(5, 5, 7, true, true)]
        public void InOrderEqualTest(int a, int b, int c, bool equalOk, bool expected)
        {
            Logic inorder = new Logic();
            bool actual = inorder.InOrderEqual(a, b, c, equalOk, expected);

            Assert.AreEqual(expected, actual);

        }

        //_______________________________________________________________________________________________________________________________________________________
     
     
    }
}
